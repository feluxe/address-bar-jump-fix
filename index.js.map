{"version":3,"sources":["src/index.js"],"names":[],"mappings":";;;;;;AAAA;;;;;IAKM,O;AAEJ,qBAAc;AAAA;;AACZ,SAAK,KAAL,GAAa,IAAb;AACA,SAAK,WAAL,GAAmB,KAAnB;AACA,SAAK,aAAL,GAAqB,IAArB;AACA,SAAK,UAAL,GAAkB,GAAlB;AACD;;AAED;AACA;;;;;yCACqB;AAAA;;AACnB,UAAI,KAAK,aAAT,EACE,aAAa,KAAK,aAAlB;AACF,WAAK,WAAL,GAAmB,IAAnB;AACA,WAAK,aAAL,GAAqB,WAAW,YAAM;AACpC,cAAK,WAAL,GAAmB,KAAnB;AACD,OAFoB,EAElB,KAAK,UAFa,CAArB;AAGD;;AAED;;;;kCACc;AAAA;;AACZ,WAAK,KAAL,CAAW,OAAX,CAAmB,UAAC,IAAD,EAAO,CAAP,EAAa;AAC9B,eAAK,KAAL,CAAW,CAAX,EAAc,WAAd,GAA4B,KAAK,YAAjC;AACD,OAFD;AAGD;;AAED;AACA;;;;mCACe;AAAA;;AACb,UAAI,KAAK,WAAL,KAAqB,IAAzB,EAA+B;AAC7B,aAAK,KAAL,CAAW,OAAX,CAAmB,UAAC,IAAD,EAAO,CAAP,EAAa;AAC9B,iBAAK,KAAL,CAAW,CAAX,EAAc,KAAd,CAAoB,MAApB,GAAgC,OAAK,KAAL,CAAW,CAAX,EAAc,WAA9C;AACD,SAFD;AAGD,OAJD,MAIO;AACL,aAAK,KAAL,CAAW,OAAX,CAAmB,UAAC,IAAD,EAAO,CAAP,EAAa;AAC9B,iBAAK,KAAL,CAAW,CAAX,EAAc,KAAd,CAAoB,MAApB,GAA6B,EAA7B;AACD,SAFD;AAGD;AACF;;AAED;AACA;;;;mCACe;AACb,UAAI,KAAK,WAAL,KAAqB,KAAzB,EACE,KAAK,WAAL;AACF,WAAK,kBAAL;AACD;;;mCAEc;AACb,aAAO,gBAAP,CAAwB,QAAxB,EAAkC,KAAK,YAAL,CAAkB,IAAlB,CAAuB,IAAvB,CAAlC;AACA,aAAO,gBAAP,CAAwB,WAAxB,EAAqC,KAAK,YAAL,CAAkB,IAAlB,CAAuB,IAAvB,CAArC;AACA,aAAO,gBAAP,CAAwB,QAAxB,EAAkC,KAAK,YAAL,CAAkB,IAAlB,CAAuB,IAAvB,CAAlC;AACD;;;yBAEI,O,EAAS;AACZ,UAAM,IAAI,WAAW,EAArB;AACA,WAAK,UAAL,GAAkB,gBAAgB,CAAhB,IAAqB,CAAC,MAAM,EAAE,UAAR,CAAtB,GAA4C,EAAE,UAA9C,GAA2D,GAA7E;AACA,WAAK,KAAL,GAAa,SAAS,gBAAT,CAA0B,wBAA1B,CAAb;AACA,WAAK,YAAL;AACD;;;;;;AAGH,OAAO,OAAP,GAAiB,IAAI,OAAJ,EAAjB","file":"index.js","sourcesContent":["/**\n * Mobile Browser Address-bar Resize Jump Fix.\n * Prevent elements from jumping if the mobile browser address bar appears/disappears.\n */\n\nclass JumpFix {\n\n  constructor() {\n    this.items = null;\n    this.isScrolling = false;\n    this.timeoutScroll = null;\n    this.offsetTime = 100;\n  }\n\n  // This sets 'isScrolling' to true each time it fires and keeps it true for a certain amount of\n  // time. Then it sets back to false.\n  setScrollingStatus() {\n    if (this.timeoutScroll)\n      clearTimeout(this.timeoutScroll);\n    this.isScrolling = true;\n    this.timeoutScroll = setTimeout(() => {\n      this.isScrolling = false;\n    }, this.offsetTime);\n  }\n\n  // Save current element heights\n  saveHeights() {\n    this.items.forEach((item, i) => {\n      this.items[i].savedHeight = item.clientHeight;\n    });\n  }\n\n  // On resize: if user is scrolling use initially saved heights.\n  // if user is NOT scrolling save new height of each element after resize.\n  handleResize() {\n    if (this.isScrolling === true) {\n      this.items.forEach((item, i) => {\n        this.items[i].style.height = `${this.items[i].savedHeight}px`;\n      });\n    } else {\n      this.items.forEach((item, i) => {\n        this.items[i].style.height = '';\n      });\n    }\n  }\n\n  // If user starts scrolling save initial heights\n  // Update scrolling status\n  handleScroll() {\n    if (this.isScrolling === false)\n      this.saveHeights();\n    this.setScrollingStatus();\n  }\n\n  addListeners() {\n    window.addEventListener('scroll', this.handleScroll.bind(this));\n    window.addEventListener('touchmove', this.handleScroll.bind(this));\n    window.addEventListener('resize', this.handleResize.bind(this));\n  }\n\n  init(options) {\n    const o = options || {};\n    this.offsetTime = 'offsetTime' in o && !isNaN(o.offsetTime) ? o.offsetTime : 100;\n    this.items = document.querySelectorAll('[data-jump-fix=\"true\"]');\n    this.addListeners();\n  }\n}\n\nmodule.exports = new JumpFix();\n"]}